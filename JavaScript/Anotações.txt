GERAL __________________________________________________________________________________________________________________________________________________________________


FRONT-END ______________________________________________________________________________________________________________________________________________________________



BACK-END _______________________________________________________________________________________________________________________________________________________________

Comandos do Sistema: 

	• su 'usuario' ------------------------------------- Loga no usuario determinado.
	• sudo --------------------------------------------- É utilizado na frente de comandos que necessitem da permissão de administrador.
	• cd 'caminho' ------------------------------------- Vai ate o caminho especificado começando da raiz.
	• ls ----------------------------------------------- Exibe pastas e subpastas do diretório atual.
	• mkdir 'caminho' ---------------------------------- Cria o diretório 'caminho'.
	• sudo apt update ---------------------------------- Atualiza lista de programas disponiveis e suas versões.
	• sudo apt upgrade --------------------------------- Atualiza programas que possuirem atualização.
	• rm 'caminho/arquivo.extenção' -------------------- Apaga o arquivo.
	• mv 'caminhoantigo/arquivo.extenção' '/caminhonovo' Move o arquivo para da primeira para a segunda posição.

ESTUDO DOS MODULOS

	MODULOS:
		• Os Modulos são arquivos de js.

	COMANDOS
		• require('modulo') ----------------------- Importa o modulo 'modulo' 
		• promises >>>>>>>>>>>>>>>>>>>>>>>ATUALIZE<<<<<<<<<<<<<<<<<<<<<<<<<<< (try, catch, async, await, then)
		• JSON.stringfy('objeto','replace','x') --- Transforma o objeto enviado para string JSON.
			objeto = objeto a ser transformado.
			replace = array que contem strings com nome das chaves que devem entrar no JSON.
			x = string ou numero de espaços que será utilizada no identamento.
		• JSON.parse('json') ---------------------- Retorna um objeto que equivale a string json 'json'.

	VARIAVEIS
		• __dirname ------------------------------- Variavel de cada modulo que armazena o caminho do arquivo em execução.
		• __filename ------------------------------ Variavel de cada modulo que armazena o nome + extenção do arquivo em execução.

	PROPRIEDADES
		• module.exports / this / exports --------- Representa tudo que esta sendo exportado do módulo (module.exports = exports = this).
			Podendo representar variaveis, objetos, constantes, funções, etc.
			EX: Estamos exportanto o 'y' do 'ARQ1' em 'module.exports.x', e depois armazenando esse 'module.exports.x' (que é o 'y' do 'ARQ1') no 'y' do 'ARQ2':
				ARQ 1 -->	module.exports.x = y;
			    	ARQ 2 -->	const y = require('ARQ1').x;


PROGRAMAS: 

	NODE:
		• Programa base que permite utilizar js fora do navegador (BACKEND)
		• Veja mais sobre os pacotes em 'PACOTES DO NODE'.
	COMANDOS
		• node 'caminho do arquivo' --------------- Executa o arquivo especificado.
		• npm init -------------------------------- Inicializa um novo arquivo package.json.
		• npm i/install --------------------------- Instala as dependências listadas no arquivo package.json.	
		• npm uninstall 'pacote'------------------- Remove um pacote do projeto.
		• npm update 'pacote' --------------------- Atualiza um pacote para a versão mais recente.
		• npm ls ---------------------------------- Exibe pacotes instalados, dependencias, dependencias das dependencias, ...
			--depth=0 ------------------------- Apenas os instalados.
			--depth=1 ------------------------- Instalados + Dependencias.
			--depth=2 ------------------------- Instalados + Dependencias + Dependencias das Dependencias.
		• npm i/install 'pacote' ------------------ Instala um pacote específico no projeto.
			--save-dev ------------------------ Instala como dependencia de desenvolvedor.
			'pacote'@'versão' ----------------- Instala na versão especifica.
				OBS 1: versão: x.y.z --> x = major, y = minor, z = patch. 
					EX:  1.0.0 + correção de bug --> 1.0.1  |  1.0.1 + adição que não quebra nada --> 1.1.0  |  1.1.0 + adição que não quebra versão anterior --> 2.0.0 .
				OBS 2: Podemos usar os seguintes simbolos na frente das versões: '^' (permite atualizar minor e patch) e '~' (permite atualizar patch).
				OBS 3: Também podemos usar especificação de range: @4.x.x (atualiza minor e patch) / @4.1.x (atualiza patch).
		• npm update ------------------------------ Atualiza todos os pacotes (permitidos (com '^' ou '~')) para a versão mais recente.
		• npm uotdate ----------------------------- Imprime tabela com todos os pacotes instalados no projeto, suas versões instaladas, versões mais atuais dentro das regras de instalação ('~' e '^'), e a versão mais atual no geral

	PM2:
		• Programa que gerencia seus projetos.
		• Sempre inicia os projetos assim que o servidor é ligado, ou sempre que houver uma falha no projeto.
	COMANDOS
		• pm2 start 'caminho do arquivo' ---------- Cria um novo projeto no pm2.
			--name 'nome do projeto' ---------- Define nome do projeto.
			--watch --------------------------- Define que o projeto utiliza uma porta da rede. Ex: localhost:3000.
		• pm2 list -------------------------------- Lista os projetos e seus dados.
		• pm2 save -------------------------------- Salva o estado atual dos projetos no pm2 (se ao salvar um projeto estiver ativo, este ficará ativo quando o servidor for reiniciado, caso contrário, não).
		• pm2 startup ----------------------------- Ativa a autoiniciação do pm2, apos inicio do servidor.
		• pm2 unstartup --------------------------- Desativa a autoiniciação do pm2, apos inicio do servidor.
		• pm2 delete 'nome do projeto' ------------ Deleta um projeto do pm2.
		• pm2 status 'nome do projeto' ------------ Mostra os dados detalhados do projeto escolhido.
		• pm2 restart 'nome do projeto' ----------- Reinicia o projeto.
		• pm2 stop 'nome do projeto' -------------- Para um projeto.
		• pm2 logs 'nome do projeto' -------------- Exibe saidas do projeto (O log das execuções é salvo em '\home\seu_usuario\.pm2\logs'. Portanto, lembre-se de apagar o arquivo de log a cada execução caso).
		• pm2 kill -------------------------------- Para o pm2 e todos os projetos ativos instantaneamente. 

	DOCKER-CE:
		• Programa para gerenciar banco de dados e outros.
		• Funciona como se fosse um subsistema dendo do sistema instalado.
	COMANDOS
		• INSALAÇÃO (Executar todos os comandos abaixo)
			• sudo apt-get remove docker docker-engine docker.io containerd runc -y --> remove versões anteriores.
			• sudo apt update ------------------------- Atualiza os programas no banco de dados.
			• sudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common -y --> Instala docker e algumas dependencias.
			• curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - --> adiciona chave de segurança no docker.
			• sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" -y --> adiciona repositório do docker ao pc, isso inclui o mariadb.
			• sudo apt update ------------------------- Atualiza os programas no banco de dados.
			• sudo apt install docker-ce docker-ce-cli containerd.io -y --> instalar outras dependencias.
		• docker ps ------------------------------- Mostra todos os containers em execução.
			• docker ps -a -------------------- Mostra todos os containers inclusive os parados.
				Na parte STATUS ----------- Up = em execução, Exited = parado. 
		• sudo docker stop 'name' ----------------- Para o container de nome 'name'.
		• sudo docker start 'name' ---------------- Inicia o container de nome 'name'.
		• sudo docker restart 'name' -------------- Reinicia o container de nome 'name'.
		• sudo docker rm 'name' ------------------- Apaga o container de nome 'name' (Precisa estar parado).
		• sudo docker restart 'name' -------------- Reinicia o container de nome 'name'.
		• sudo docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' 'name' --> Mostra o ip do docker com nome 'name'.
		• sudo docker exec -it 'name' bash -------- Entra no container de nome 'name' (agora é como se voce estivesse em uma maquina diferente).
		• sudo docker run -d --name 'name' --restart always -e MYSQL_ROOT_PASSWORD='senha' -p 0.0.0.0:3306:3306 mariadb --> Cria um container de banco de dados mariadb chamado 'name' e com senha 'senha'.
			• ACESSANDO MARIADB NO MYSQL WORKBENCH
				• LIBERANDO ACESSO DE QUALQUER IP
					• Precisamos adicionar uma configuração em um arquivo dentro do container, porem a imagem do mariadb não possui editor de texto.
					• Para Resolver isso:
						• Copiamos o arquivo para a root: sudo docker cp 'name':/etc/mysql/my.cnf /
						• Adicionamos a seguinte linha de codigo, abaixo de 'socket = /run/mysqld/mysqld.sock': bind-address = 0.0.0.0
						• Copiamos o arquivo para o docker: sudo  docker cp /my.cnf myFirstdb:/etc/mysql/
						• Excluimos o arquivo da raiz: sudo rm /my.cnf
				 • ACESSANDO
					• Connection Name: Um nome para sua conexão.
					• Connection Method: Standard TCP/IP over SSH (já que estamos usando wsl).
					• SSH Hostname: 127.0.0.1 (já que estamos usando wsl).
					• SSH Username: Usuario que contem o docker.
					• SSH Password: Senha do Usuario.
					• MySQL Hostname: Ip do Container com o MySQL.		

		
PACOTES DO NODE:

	PATH:
		• Importante para trabalhar com diretórios e arquivos e manter organização e compatibilidade em qualquer sistema operacional.
		• Nativo.
	METODOS
		• require('path'); ------------------------ Retorna o Pacote path.
		• path.join('p1', 'p2'); ------------------ Retorna um caminho  que percorre pelas pastas 'p1' e 'p2' orgazinados como um unico caminho.
		• path.basename('c'); --------------------- Retorna o nome + extenção do arquivo no final do caminho 'c'.
		• path.dirname('c'); ---------------------- Retorna o diretório completo menos o arquivo no final do caminho 'c'.
		• path.extname('c'); ---------------------- Retorna a extenção do arquivo no final do caminho 'c'.
		• path.resolve('c'); ---------------------- Pega o caminho enviado e retorna um equivalente, porém com caminhos absolutos. (Utilize com __dirname que é uma variavel que representa o caminho do arquivo atual).

	FS:
		• Importante para trabalhar com diretórios e arquivos e obter informações sobre eles.
		• Nativo.
		• Trabalha com promisses e funções sincronas, veja mais em 'ESTUDO DE MODULOS / COMANDOS'.
	METODOS
		• require('fs').promises; ----------------- Retorna promessas do Pacote fs.
		• fs.readdir('caminho') ------------------- Função sincrona que retorna array com pastas e arquivos no caminho determinado (semelhante ao comando 'ls').
		• fs.readFile('caminho', 'utf8')----------- Função sincrona que retorna o conteudo no arquivo 'caminho'.		
		• fs.stat('caminho') ---------------------- Função sincrona que retorna objeto com informações importantes sobre o arquivo.
			.isDirectory() -------------------- Metodo que retorna se é diretório ou não.
			.size ----------------------------- Tamanho do arquivo / pasta.
			.isFile() ------------------------- Metodo que retorna se é arquivo ou não.
			.birthtime ------------------------ Data de criação.
			.mtime ---------------------------- Data de modificação.
			.atime ---------------------------- Data de acesso.
		• fs.writeFileSync('caminho', 'conteudo', 'objeto com configurações') --> Função sincrona que escreve o 'conteudo' no arquivo 'caminho'.
			OBS 1: nas configurações mandamos um objeto com configurações da ação, entre elas a flas:
				{ flag: 'a' }
				a = novo arquivo para escrita (adiciona ao final se já existir).
				w = novo arquivo para escrita (sobreescreve se já existir).
				wx = novo arquivo para escrita (falha se já existir).
	NODEMON:
		• Responsavel por reiniciar o servidor sempre que houver mudanças nos arquivos.
		• Não nativo.
	COMANDOS
		• npx nodemon 'arquivo' ------------------- Executa o arquivo 'arquivo' e sempre que houver mudança, reexeculta.

	EXPRESS:
		• Responsavel por gerenciar requerimentos e respostas.
		• Não nativo.
	METODOS
		• require('express') ---------------------- Retorna o Pacote express.
		• express(); ------------------------------ Retorna um app gerenciador do servidor.
			.listen(n, 'função'); ------------- Ativa o app na porta 'n' do localhost e executa a função 'função'.
				OBS 1: Geralmente essa função serve para dar um log dizendo que o servidor foi inicado.
			.use('alguma coisa'); ------------- Faz com que o app utilize algum processo.
				.use(express.static('caminho')); --> Definimos as informações estaticas (css, fotos, etc) estão localizadas na pasta do caminho.
			.set('views', 'caminho'); --------- Definimos a pasta onde estão os arquivos de renderização HTML(ejs), includes e pages.
			.set('view engine', 'ejs'); ------- Definimos que a engine que renderiza as paginas é o ejs (veja mais sobre o ejs no PACOTES DO NODE / EJS).
		• express.Router() ------------------------ Retorna objeto que mapea as rotas dos requerimentos.
			.get('/url', (req, res, next) => {}) --> Ao receber o requerimento GET da string '/url' executa a função seguinte.
				PARAMETROS NO REQUERIMENTO
				Em '/url' podemos ter: '/x/:y' --> Isso significa que teremos um requerimento '/x' e o que vier depois é o parametro y (esse parametro 'y' fica disponivel em 'req.params.y').
					OBS 1: '/x/:y' === parametro obrigatório, só vai executar a função se o parametro for enviado.
					OBS 2: '/x/:y?' === parametro não obrigatório, vai executar a função msm se o parametro não for enviado.
				PARAMETROS NO FIM DA URL
				Os paramentros de fim de url seguem o seguinte formato: 'requerimento?parametro1=valor1&parametro2=valor2'
					Estem podem ser acessados no req.query.
			.post('/url', (req, res, next) => {}) --> Ao receber o requerimento POST da string '/url' executa a função seguinte.
				PARAMETROS EM FORMULARIOS
				São recebidos no req.body.'nome do input no formulario HTML'.
					OBS 1: precisamos usar no app: 'app.use(express.urllencode({extended:true}))'.
			OBS 1: Precimos exportar esse objeto, carrega-lo no modulo principal e depois usa-lo no app.
				EX: ROUTES:
					const routes = express.Router();
					...
					module.exports = routes;
				    APP:
					const routes = require('caminho do arquivo');
					app.use(routes);
			OBS 2: Geralmente as funções que serão chamadas são importadas de outros modulos, os CONTROLLERS.
			OBS 3: 	INFO REQ:	• req = dados do pedido do requerimento.
				INFO RES:	• res = dados da resposta do requerimento.
				 		• res.send('texto') --> Envia o a strig 'texto' como html para a requisição.
	
	EJS:
		• Responsavel pela renderização de arquivos html com js.
		• Não nativo.
	METODOS
		• 
	
	
REACT ---------------------------------------

O React consiste no js substituir espaços reservados por fragmento de texto JSX (HTML)
Esse fragmentos são retornados por funções.
Cada função pode retornar apenas um elemento, nunca mais de um, e por isso usamos a tag vazio (<> </>).
	ex: return (<><h1></h1><p></p></>)
COMANDOS
	• npx create-react-app 'name' -------------------- Cria um projeto de REACT na pasta atual.
	• npx react-scripts start ------------------------ Inicia o projeto da pasta atual.

Bibliotecas:
	react-icons:
		• Disponibiliza utilização de icones no react.
		• Veja todos os icones em https://react-icons.github.io/react-icons.
	METODOS
		• import {'NomeDoIcone'} from 'react-icons/ "sub-pasta"'.
			EX: import {MdAssignmentAdd} from 'react-icons/md' --> importamos 'MdAssignmentAdd' da pasta 'md'





			
			
		
	
